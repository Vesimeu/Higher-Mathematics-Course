# //Решение систем алгебраических уравнений (СЛАУ) postbox-a@yandex.ru
import numpy as np


def gauss_elimination(a, b):
    """
    Решает систему линейных уравнений методом Гаусса.

    :param a: Матрица коэффициентов системы (2D numpy array).
    :param b: Вектор свободных членов системы (1D numpy array).
    :return: Вектор решений системы (1D numpy array).
    """
    n = len(b)  # Количество уравнений в системе или кол-во строк в матрице

    # Прямой ход: преобразование системы к верхнетреугольному виду (Каждая итерация этого цикла соответствует одному шагу преобразования матрицы)
    for k in range(n - 1):
        # Проверка главного элемента на нуль
        if a[k][k] == 0:
            raise ValueError("Division by zero detected! Consider pivoting or another method.")

        for i in range(k + 1, n): # Для каждой строки ниже текущей
            factor = a[i][k] / a[k][k]  # Коэффициент для преобразования строк

            # Вычитание текущей строки из последующих строк, чтобы обнулить элементы ниже главной диагонали
            for j in range(k, n):
                a[i][j] -= factor * a[k][j]

            b[i] -= factor * b[k]  # Аналогичное преобразование для вектора свободных членов

    # Вывод верхнетреугольной матрицы после прямого хода
    print("Верхнетреугольная матрица после прямого хода:")
    print(a)
    print("Преобразованный вектор свободных членов:")
    print(b)

    # Обратный ход: нахождение решений системы, начиная с последнего уравнения
    x = np.zeros(n)  # Вектор для хранения решений
    for i in range(n - 1, -1, -1): #Идёт в обратку до первого.
        sum_ax = sum(a[i][j] * x[j] for j in range(i + 1, n))  # Сумма произведений коэффициентов и найденных решений
        x[i] = (b[i] - sum_ax) / a[i][i]  # Вычисление решения для текущего уравнения

    return x


def main():

    #Мы предпологаем, что система уравнений квадратная
    # Исходная система уравнений
    a = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float)
    b = np.array([8, -11, -3], dtype=float)

    print("Исходная матрица системы и вектор свободных членов:")
    print(a)
    print("|Вектор свободных членов|")
    print(b)

    # Решение системы методом Гаусса
    x = gauss_elimination(a.copy(), b.copy())  # Используем .copy() для сохранения исходных данных

    print("\nРешение СЛАУ:")
    print(x)


if __name__ == "__main__":
    main()
